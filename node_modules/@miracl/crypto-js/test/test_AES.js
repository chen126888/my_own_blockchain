/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/


/* Test AES function - test driver and function exerciser for AES API Functions */

import CTX from '../src/ctx.js';

import chai from 'chai';
var expect = chai.expect;

import AES_ECB_MMT128_ENC from '../testVectors/aes/AES_ECB_MMT128_ENC.js';
import AES_ECB_MMT128_DEC from '../testVectors/aes/AES_ECB_MMT128_DEC.js';
import AES_CTR_MLC128 from '../testVectors/aes/AES_CTR_MLC128.js';
import AES_CBC_MMT128 from '../testVectors/aes/AES_CBC_MMT128.js';

var ctx = new CTX();

var bytestostring = function(b) {
    var s = "";
    var len = b.length;
    var ch;

    for (var i = 0; i < len; i++) {
        ch = b[i];
        s += ((ch >>> 4) & 15).toString(16);
        s += (ch & 15).toString(16);
    }
    return s;
}

var stringtobytes = function(s) {
    var b = [];
    for (var i = 0; i < s.length; i++)
        b.push(s.charCodeAt(i));
    return b;
}

var hextobytes = function(value_hex) {
    // "use strict";
    var len, byte_value, i;

    len = value_hex.length;
    byte_value = [];

    for (i = 0; i < len; i += 2) {
        byte_value[(i / 2)] = parseInt(value_hex.substr(i, 2), 16);
    }
    return byte_value;
};

var AES_ENCRYPT = function(mode, K, M, IV) {
    /* Input is from an octet string M, output is to an octet string C */
    /* Input is padded as necessary to make up a full final block */
    var a = new ctx.AES();
    var fin;
    var i, j, ipt, opt;
    var buff = [];

    var C = [];

    a.init(mode, K.length, K, IV);

    ipt = opt = 0;
    fin = false;
    for (;;) {
        for (i = 0; i < 16; i++) {
            if (ipt < M.length) buff[i] = M[ipt++];
            else {
                fin = true;
                break;
            }
        }
        if (fin) break;
        a.encrypt(buff);
        for (i = 0; i < 16; i++)
            C[opt++] = buff[i];
    }

    a.end();
    return C;
};

var AES_DECRYPT = function(mode, K, C, IV) { /* padding is removed */
    var a = new ctx.AES();
    var i, ipt, opt, ch;
    var buff = [];
    var MM = [];
    var fin, bad;
    var padlen;
    ipt = opt = 0;

    a.init(mode, K.length, K, IV);

    if (C.length === 0) return [];
    ch = C[ipt++];

    fin = false;

    for (;;) {
        for (i = 0; i < 16; i++) {
            buff[i] = ch;
            if (ipt >= C.length) {
                fin = true;
                break;
            } else ch = C[ipt++];
        }
        a.decrypt(buff);
        if (fin) break;
        for (i = 0; i < 16; i++)
            MM[opt++] = buff[i];
    }

    a.end();

    for (i = 0; i < 16; i++)
        MM[opt++] = buff[i];

    var M = [];
    if (bad) return M;

    for (i = 0; i < opt; i++) M[i] = MM[i];
    return MM;
};

describe('TEST AES', function() {

    var IV, KEY, PLAINTEXT, CIPHERTEXT, Cout, Pout;

    it('test AES-128-ECB encryption', function(done) {
        this.timeout(0);

        for (var vector in AES_ECB_MMT128_ENC) {
            KEY = hextobytes(AES_ECB_MMT128_ENC[vector].KEY);
            PLAINTEXT = hextobytes(AES_ECB_MMT128_ENC[vector].PLAINTEXT);

            Cout = AES_ENCRYPT(ctx.AES.ECB,KEY,PLAINTEXT,null);

            expect(bytestostring(Cout)).to.be.equal(AES_ECB_MMT128_ENC[vector].CIPHERTEXT);
        }
        done();
    });

    it('test AES-128-ECB decryption', function(done) {
        this.timeout(0);

        for (var vector in AES_ECB_MMT128_DEC) {
            KEY = hextobytes(AES_ECB_MMT128_DEC[vector].KEY);
            CIPHERTEXT = hextobytes(AES_ECB_MMT128_DEC[vector].CIPHERTEXT);

            Pout = AES_DECRYPT(ctx.AES.ECB,KEY,CIPHERTEXT,null);

            expect(bytestostring(Pout)).to.be.equal(AES_ECB_MMT128_DEC[vector].PLAINTEXT);
        }
        done();
    });

    it('test AES-128-CTR encryption', function(done) {
        this.timeout(0);

        for (var vector in AES_CTR_MLC128) {
            KEY = hextobytes(AES_CTR_MLC128[vector].KEY);
            PLAINTEXT = hextobytes(AES_CTR_MLC128[vector].PLAINTEXT);
            IV = hextobytes(AES_CTR_MLC128[vector].IV);

            Cout = AES_ENCRYPT(ctx.AES.CTR16,KEY,PLAINTEXT,IV);

            expect(bytestostring(Cout)).to.be.equal(AES_CTR_MLC128[vector].CIPHERTEXT);
        }
        done();
    });

    it('test AES-128-CTR decryption', function(done) {
        this.timeout(0);

        for (var vector in AES_CTR_MLC128) {
            KEY = hextobytes(AES_CTR_MLC128[vector].KEY);
            CIPHERTEXT = hextobytes(AES_CTR_MLC128[vector].CIPHERTEXT);
            IV = hextobytes(AES_CTR_MLC128[vector].IV);

            Pout = AES_DECRYPT(ctx.AES.CTR16,KEY,CIPHERTEXT,IV);

            expect(bytestostring(Pout)).to.be.equal(AES_CTR_MLC128[vector].PLAINTEXT);
        }
        done();
    });

    it('test AES-128-CBC encryption', function(done) {
        this.timeout(0);

        for (var vector in AES_CBC_MMT128) {
            KEY = hextobytes(AES_CBC_MMT128[vector].KEY);
            PLAINTEXT = hextobytes(AES_CBC_MMT128[vector].PLAINTEXT);
            IV = hextobytes(AES_CBC_MMT128[vector].IV);

            Cout = AES_ENCRYPT(ctx.AES.CBC,KEY,PLAINTEXT,IV);

            expect(bytestostring(Cout)).to.be.equal(AES_CBC_MMT128[vector].CIPHERTEXT);
        }
        done();
    });

    it('test AES-128-CBC decryption', function(done) {
        this.timeout(0);

        for (var vector in AES_CBC_MMT128) {
            KEY = hextobytes(AES_CBC_MMT128[vector].KEY);
            CIPHERTEXT = hextobytes(AES_CBC_MMT128[vector].CIPHERTEXT);
            IV = hextobytes(AES_CBC_MMT128[vector].IV);

            Pout = AES_DECRYPT(ctx.AES.CBC,KEY,CIPHERTEXT,IV);

            expect(bytestostring(Pout)).to.be.equal(AES_CBC_MMT128[vector].PLAINTEXT);
        }
        done();
    });

});